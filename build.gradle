plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
}

idea {
    module {
        inheritOutputDirs = true
    }
}

group 'com.dezhik'
version '0.0.1-SNAPSHOT'

sourceCompatibility = 11

task clientJar(type: Jar, dependsOn: classes) {
    archiveAppendix = 'client'
    includeEmptyDirs = false
    from sourceSets.main.output
    include ("**\\dezhik\\conf\\client\\*", "**\\dezhik\\conf\\loader\\*","**\\dezhik\\conf\\converter\\*")
}

repositories {
    mavenCentral()
    maven {
        name "JBoss Public Maven Repository Group"
        url "https://repository.jboss.org/nexus/content/groups/public/"
    }
}

publishing {
    publications {
        serverLib(MavenPublication) {
            from components.java
        }

        clientLib(MavenPublication) { // publishClientLibPublicationToMavenLocal
            artifactId = 'dconf-client'
            artifact clientJar
        }
    }
    repositories {
        mavenLocal()
    }
}

ext {
    springVersion = '5.1.5.RELEASE'
    jacksonVersion = '2.13.3'
}

dependencies {
    implementation group: 'org.mongodb', name: 'mongodb-driver', version: '3.9.1'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.1'

    implementation "javax.annotation:javax.annotation-api:1.3.2"

    implementation 'org.eclipse.jetty:jetty-server:11.0.9'
    implementation 'org.freemarker:freemarker:2.3.31'

    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    implementation group: 'tanukisoft', name: 'wrapper', version: '3.2.3'


    testImplementation 'junit:junit:4.13.2'
    testImplementation group: "de.flapdoodle.embed", name: "de.flapdoodle.embed.mongo", version: "3.5.0"
}

sourceSets.test.java.srcDirs = ['src/test/java']

test {
    useJUnit()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    dependsOn 'cleanTest'
}


tasks.register('getDeps', Copy) {
    dependsOn jar
    var destDir = project.hasProperty("depDest") ? depDest : "runtime/";
    println "Moving jar & dependencies into $destDir directory."
    from 'build/libs'
    from sourceSets.main.runtimeClasspath
    include '*.jar'
    into destDir
}
